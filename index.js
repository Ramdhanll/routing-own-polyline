// Inisialisasi peta
var map = L.map('map').setView([1.085563071196687, 117.70000076228378], 15)

// Tambahkan layer peta dari Leaflet Tile Layer
L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
   attribution:
      '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
}).addTo(map)

let data = []

// Add a click event listener to the map
map.on('click', function (e) {
   var lat = e.latlng.lat
   var lng = e.latlng.lng

   data.push([lat, lng])

   console.log('coordinat', {
      lat,
      lng,
   })
})

const renderPolyline = (coordinats, color, opacity = 1) => {
   L.polyline(coordinats, { color, opacity }).addTo(map)
}

const handlePrintData = () => {
   console.log('data', data)
}

const polyline0 = {
   id: 0,
   data: [
      [1.0783717263150603, 117.70309371461546],
      [1.0783717263151626, 117.70295879266457],
      [1.0783835221310418, 117.70282440591913],
      [1.0783896187827282, 117.70269015090014],
      [1.0783724632828284, 117.70255632445472],
      [1.0783553077770467, 117.70242249801085],
      [1.0783392702008598, 117.7022885868053],
      [1.0783360590143904, 117.7021537030885],
      [1.0783328478219467, 117.70201881937197],
      [1.0783296366235278, 117.70188393565576],
      [1.0783404251221356, 117.70174970569073],
      [1.0783561879645627, 117.7016157080142],
      [1.0783717263151815, 117.70148169717325],
      [1.0783717263206682, 117.70134677522233],
      [1.0783717263201766, 117.70121185327145],
      [1.078368947289459, 117.70107712284945],
      [1.078350444236801, 117.70094347611946],
      [1.0783319411782772, 117.70080982939112],
      [1.078313438113888, 117.7006761826644],
      [1.0782949350436324, 117.7005425359393],
      [1.0782764319675118, 117.70040888921582],
      [1.0782676560015028, 117.7002742799505],
      [1.0782596160976028, 117.70013959784852],
      [1.0782515761877467, 117.70000491574729],
      [1.0782435362719338, 117.69987023364673],
      [1.0782354963501644, 117.69973555154692],
      [1.0782340068103589, 117.69960074852445],
      [1.0782370721211418, 117.69946586141701],
      [1.0782401374259507, 117.69933097430932],
      [1.0782444880948965, 117.69919618610552],
      [1.0782620874875422, 117.69906241733834],
      [1.078279686874312, 117.69892864856959],
      [1.0782972862552054, 117.6987948797993],
      [1.0783148856302227, 117.69866111102746],
      [1.0783324849993636, 117.6985273422541],
      [1.0783500843626284, 117.69839357347917],
      [1.0784481268784774, 117.69830134937565],
      [1.0785469827847645, 117.69820954534119],
      [1.0786458386882836, 117.69811774130076],
      [1.0787446945890338, 117.69802593725434],
   ],
}
const polyline1 = {
   id: 1,
   data: [
      [1.0748501778739217, 117.70612299601669],
      [1.0749082049029182, 117.7060011946632],
      [1.0749665839472164, 117.70587956169474],
      [1.0750269423604721, 117.70575889907477],
      [1.0750755778326602, 117.70563305294303],
      [1.0751144782071287, 117.70550387931137],
      [1.0751844967065887, 117.70538855610063],
      [1.0752580230180022, 117.70527543772559],
      [1.0753284523561224, 117.70516036520424],
      [1.0754029351599659, 117.70504787837734],
      [1.0754857871027308, 117.70494140286637],
      [1.075568458180981, 117.70483481066002],
      [1.0756309943434021, 117.70471528375083],
      [1.075679761848873, 117.70458962309813],
      [1.075764429576376, 117.70448458802846],
      [1.0758508482872977, 117.70438114045753],
      [1.0759133252318647, 117.7042615616804],
      [1.0759774003747218, 117.70414285118547],
      [1.076051068680229, 117.7040298270919],
      [1.0761282353279802, 117.70391919311886],
      [1.076216057738551, 117.70381678018455],
      [1.0763040832305164, 117.70371455099294],
      [1.0763977069505073, 117.70361748308173],
      [1.0765030705558958, 117.70353323047898],
      [1.0766085629829185, 117.70344914534398],
      [1.076717041102043, 117.70336894483363],
      [1.076826819240753, 117.7032905709712],
      [1.0769436067349072, 117.70322338894343],
      [1.077072203099025, 117.7031826329978],
      [1.077200799462609, 117.70314187704875],
      [1.0773297260231394, 117.70310330490709],
      [1.0774646087804465, 117.70310460161649],
      [1.0775992994008814, 117.70311208103317],
      [1.0777339907398114, 117.70311867446648],
      [1.0778686930641266, 117.70311140898022],
      [1.0780033914792888, 117.7031040713286],
      [1.0781381016636917, 117.70309711298177],
      [1.0782729960219586, 117.70309614478063],
      [1.0784078940765174, 117.70309614478063],
      [1.0785427921310762, 117.70309614478063],
      [1.078677690185635, 117.70309614478063],
      [1.0788125882401933, 117.70309614478063],
      [1.0789474862947523, 117.70309614478063],
      [1.079082384349311, 117.70309614478063],
      [1.0792172824038695, 117.70309614478063],
      [1.0793521804584283, 117.70309614478063],
      [1.0794870785129869, 117.70309614478063],
      [1.0796219407414045, 117.70309690761982],
      [1.0797562342993543, 117.70310965959185],
      [1.079890365629468, 117.70312402429472],
      [1.0800244969595132, 117.70313838899887],
      [1.0801583864645574, 117.70315403746051],
      [1.0802875697576275, 117.70319188167953],
      [1.08040550940923, 117.70325737403402],
      [1.0805234509458725, 117.70332286299377],
      [1.0806414276012586, 117.70338828858048],
      [1.0807595587082721, 117.70345343484966],
      [1.080877689813879, 117.70351858112393],
      [1.0809958209180945, 117.70358372740324],
      [1.081113952020913, 117.70364887368763],
      [1.0812302506801845, 117.7037164538707],
      [1.081325080283167, 117.70381239537858],
      [1.0814156165739763, 117.70391241651802],
      [1.081506152861497, 117.70401243766342],
      [1.0815968391353685, 117.70411232060584],
      [1.0816893769087514, 117.70421048447368],
      [1.0817847943184924, 117.70430585871031],
      [1.081880211725233, 117.70440123295292],
      [1.0819747965898272, 117.70449736423495],
      [1.082058162711109, 117.7046030510953],
      [1.0821185214023878, 117.70472371387332],
      [1.08217879986149, 117.7048444164629],
      [1.0822382427560828, 117.70496553274265],
      [1.0822967936143313, 117.70508708336193],
      [1.0823553444677163, 117.70520863398589],
      [1.082413895316231, 117.70533018461451],
      [1.08247072395349, 117.7054524208593],
      [1.082510857152333, 117.70558120743566],
   ],
}

const polyline2 = {
   id: 2,
   data: [
      [1.0768475806291977, 117.70521729713158],
      [1.0767253873683909, 117.70516241889001],
      [1.0765912151635664, 117.70514925034796],
      [1.0764604533333015, 117.70511830224187],
      [1.0763351927428741, 117.70506822076095],
      [1.0762025138923899, 117.70504419386579],
      [1.0760698650422653, 117.70501967485636],
      [1.0759373465561421, 117.704994444707],
      [1.0758183136665114, 117.70493227702494],
      [1.0756948362702563, 117.70488096583338],
      [1.07557151665085, 117.70483046625262],
   ],
}

const polyline3 = {
   id: 3,
   data: [
      [1.0803561968676247, 117.70319563852442],
      [1.0804516142742926, 117.70310026432662],
      [1.080555736247376, 117.7030146232626],
      [1.0806610998508959, 117.70293037054239],
      [1.0807866219293971, 117.7028848306795],
      [1.0809160449646034, 117.7028467823129],
      [1.0810455505693788, 117.70280913593933],
      [1.081179488921921, 117.70279307061263],
      [1.081313427274378, 117.7027770052845],
      [1.08144736562675, 117.70276093995493],
      [1.0815813151477, 117.70274506158637],
      [1.0817162132022584, 117.70274506158637],
      [1.0818511112568172, 117.70274506158637],
      [1.0819860093113758, 117.70274506158637],
      [1.0821209073659346, 117.70274506158637],
      [1.0822551183639968, 117.70275519318058],
      [1.08238878096423, 117.70277341165601],
      [1.0825224435643543, 117.70279163013305],
      [1.0826560638657141, 117.70281008832677],
      [1.0827878868062668, 117.70283873253089],
      [1.0829197097465493, 117.70286737673749],
      [1.083051532686561, 117.70289602094658],
      [1.0831820762875286, 117.70292917413911],
      [1.0833092927322487, 117.70297405376911],
      [1.0834365091763045, 117.70301893340289],
      [1.0835629251943966, 117.70306594192279],
      [1.0836881857850282, 117.7031160235223],
      [1.0838134463748323, 117.70316610512597],
      [1.0839409907969164, 117.70320994695352],
      [1.0840689743960121, 117.70325258888445],
      [1.0841969579945079, 117.70329523081897],
      [1.0843240796463909, 117.70334022772536],
      [1.0844493402367437, 117.70339030933815],
      [1.0845762424079655, 117.70343590590265],
   ],
}

const polyline4 = {
   id: 4,
   data: [
      [1.0817516478077178, 117.70272843179477],
      [1.0817694777754814, 117.70259469342207],
      [1.081787307737355, 117.70246095504778],
      [1.0818049120562236, 117.70232718690649],
      [1.0818223609723276, 117.70219339826409],
      [1.081839809882535, 117.70205960962018],
      [1.0818572587868447, 117.70192582097474],
      [1.0818496482337645, 117.70179136879948],
      [1.0818393012454883, 117.7016568441694],
      [1.0818289542512498, 117.70152231954026],
      [1.0818186072510487, 117.70138779491201],
      [1.0818160450822483, 117.70125297123325],
      [1.081816045088097, 117.70111804912945],
      [1.0818160450879484, 117.70098312702561],
      [1.0818160450818022, 117.70084820492178],
      [1.0818160450778833, 117.70071328281797],
      [1.0818160450874166, 117.70057836071415],
      [1.081816045090952, 117.70044343861032],
      [1.0818160450884902, 117.70030851650651],
      [1.0818160450800305, 117.70017359440267],
      [1.0818107602133022, 117.70003887025322],
      [1.0818006704431784, 117.69990432608127],
      [1.0817905806670907, 117.69976978191018],
      [1.0817804908850388, 117.69963523773998],
      [1.0817704010970235, 117.69950069357068],
      [1.0817603113030443, 117.69936614940228],
      [1.0817516478098834, 117.69923155180967],
      [1.0817516478217821, 117.69909662970873],
      [1.0817516478276834, 117.69896170760775],
      [1.0817516478275875, 117.6988267855068],
      [1.0817516478214944, 117.69869186340584],
      [1.0817516478094042, 117.69855694130487],
      [1.0817516478231861, 117.69842201920393],
      [1.0817516478348852, 117.69828709710296],
      [1.0817516478405875, 117.69815217500202],
      [1.0817516478402918, 117.69801725290107],
      [1.0817516478339997, 117.69788233080011],
      [1.0817516478217102, 117.69774740869914],
      [1.0817564929473757, 117.69761290849678],
      [1.081779805006771, 117.69748001633133],
      [1.0818031170603482, 117.69734712416383],
      [1.0818264291081068, 117.69721423199427],
      [1.0818497411500472, 117.69708133982269],
      [1.0818730531861689, 117.69694844764906],
      [1.081896365216472, 117.69681555547336],
      [1.0819196772409563, 117.69668266329568],
      [1.0819429892596215, 117.69654977111591],
      [1.0819663012724676, 117.6964168789341],
      [1.0819932288878145, 117.69628467220737],
      [1.082020157130901, 117.69615246559843],
      [1.0820470853682278, 117.69602025898715],
      [1.082074013599795, 117.69588805237352],
      [1.0821009418256022, 117.69575584575752],
      [1.0821278700456494, 117.69562363913919],
      [1.0821547982599364, 117.69549143251851],
      [1.082181726468463, 117.69535922589547],
   ],
}

const polyline5 = {
   id: 5,
   data: [
      [1.0844260003207309, 117.70346400752541],
      [1.084502814681495, 117.70335309564344],
      [1.084579629038197, 117.70324218375583],
      [1.0846688738123085, 117.70314249079165],
      [1.084771320314924, 117.7030547128873],
      [1.0848737668149946, 117.70296693497697],
      [1.0849778205364526, 117.70288109918641],
      [1.0850831812137263, 117.70279684268263],
      [1.0851885418886542, 117.70271258617299],
      [1.0852939025612358, 117.70262832965749],
      [1.0854000527992753, 117.70254508123534],
      [1.0855070694265747, 117.70246293899311],
      [1.0856140860516437, 117.70238079674506],
      [1.0857211026744815, 117.7022986544912],
      [1.0858281192950885, 117.7022165122315],
      [1.0859351359134637, 117.70213436996602],
      [1.0860421525296078, 117.7020522276947],
      [1.0861491691435206, 117.70197008541757],
      [1.086256185755201, 117.70188794313462],
      [1.0863632023646497, 117.70180580084586],
      [1.0864702189718656, 117.70172365855124],
      [1.086575435947444, 117.70163936677754],
      [1.08667508154179, 117.70154842055567],
      [1.0867747271333987, 117.7014574743278],
      [1.0868743727222703, 117.70136652809394],
      [1.086974018308404, 117.70127558185406],
      [1.0870773963629916, 117.70118942733046],
      [1.0871899359103268, 117.7011150342689],
      [1.0873024754558298, 117.70104064120174],
      [1.0874150149995003, 117.70096624812908],
      [1.0875275545413379, 117.70089185505088],
      [1.0876400940813424, 117.7008174619671],
      [1.0877526336195142, 117.70074306887777],
      [1.0878651731558522, 117.70066867578291],
      [1.0879777126903567, 117.7005942826825],
      [1.0880902522230278, 117.70051988957653],
      [1.0882027917538646, 117.70044549646504],
      [1.0883153312828677, 117.70037110334795],
      [1.088433941046992, 117.70030841768934],
      [1.0885595732149387, 117.70025927590487],
      [1.0886852053820855, 117.70021013411628],
      [1.0888108375484309, 117.70016099232357],
      [1.0889338207958965, 117.70010588756186],
      [1.0890544907820627, 117.70004557542822],
      [1.0891751607670221, 117.69998526328978],
      [1.0892958307507752, 117.69992495114647],
      [1.0894165007333216, 117.69986463899833],
      [1.0895371707146613, 117.69980432684538],
      [1.0896578406947939, 117.69974401468758],
      [1.0897785106737188, 117.69968370252496],
   ],
}

const polyline6 = {
   id: 6,
   data: [
      [1.0896562844446354, 117.69975380420688],
      [1.08971979353793, 117.69987283867543],
      [1.0897833026265245, 117.69999187314899],
      [1.0898487174931288, 117.70010982218952],
      [1.0899186640049796, 117.70022519023544],
      [1.0899886105124126, 117.70034055828671],
      [1.0900585570154273, 117.70045592634334],
      [1.0901285035140236, 117.70057129440535],
      [1.090198450008201, 117.70068666247272],
      [1.0902640802149715, 117.70080402883882],
      [1.0903067602207572, 117.7009320203755],
      [1.090349440221104, 117.70106001191584],
      [1.0903921202160107, 117.70118800345978],
      [1.0904348002054773, 117.70131599500736],
      [1.0904774801895043, 117.70144398655857],
      [1.0905213933723599, 117.70157151148871],
      [1.0905741027801847, 117.70169570807022],
      [1.090626812182887, 117.7018199046561],
      [1.0906795215804657, 117.70194410124634],
      [1.0907322309729208, 117.70206829784095],
      [1.0907849403602523, 117.70219249443987],
      [1.0908439723562622, 117.70231352931573],
      [1.090911681501325, 117.70243022504263],
      [1.0909793906418632, 117.7025469207748],
      [1.0910470997778767, 117.70266361651221],
      [1.0911148089093659, 117.70278031225486],
      [1.0911825180363293, 117.70289700800278],
      [1.0912502271587678, 117.70301370375593],
      [1.09131793627668, 117.70313039951435],
      [1.0913856453900668, 117.70324709527802],
      [1.0914427302358625, 117.70336756496164],
      [1.091463780784096, 117.70350083462748],
      [1.0914848313264252, 117.70363410429518],
      [1.0915058818628505, 117.70376737396475],
      [1.0915269323933725, 117.70390064363619],
      [1.0915479829179902, 117.7040339133095],
      [1.0915733322872272, 117.70416580436827],
      [1.0916336875501738, 117.70428646924192],
      [1.0916940428082798, 117.70440713412043],
      [1.091754398061545, 117.70452779900377],
      [1.0918147533099694, 117.70464846389194],
      [1.0918751085535523, 117.70476912878499],
      [1.0919354637922936, 117.70488979368287],
      [1.0919958190261934, 117.7050104585856],
      [1.0920511377330129, 117.70513321122358],
      [1.0920938177326518, 117.70526120283836],
      [1.0921364977268417, 117.7053891944568],
      [1.0921791777155838, 117.70551718607885],
      [1.0922159350882277, 117.7056465987644],
      [1.0922359568831028, 117.70578002695345],
      [1.0922559786720565, 117.70591345514427],
      [1.0922778171359033, 117.706046308459],
      [1.0923381723888368, 117.70616697336595],
      [1.0923985276369264, 117.70628763827774],
      [1.0924588828801722, 117.70640830319437],
      [1.092537121106586, 117.70651584544052],
      [1.0926340853672536, 117.70660964638067],
      [1.0927310496249933, 117.70670344732687],
      [1.0928280138798054, 117.70679724827914],
      [1.092924978131689, 117.7068910492375],
      [1.093021942380644, 117.70698485020185],
      [1.0931189066266702, 117.7070786511723],
      [1.0932395877742656, 117.70711183487809],
      [1.0933744510418777, 117.7071087709606],
      [1.093509314309487, 117.70710570704284],
      [1.0936441775770929, 117.70710264312477],
      [1.0937790408446957, 117.70709957920647],
      [1.0939139041122956, 117.70709651528787],
      [1.0940487673798922, 117.70709345136899],
      [1.0941779956619484, 117.70706199074219],
      [1.0943038064526827, 117.70701330815415],
      [1.094429617242627, 117.70696462556201],
      [1.0945554280317822, 117.70691594296578],
      [1.0946812388201468, 117.70686726036548],
   ],
}

const polyline7 = {
   id: 7,
   data: [
      [1.084573728887907, 117.70343016677607],
      [1.0846965490089873, 117.70348596837749],
      [1.0848204479361783, 117.70353927612223],
      [1.084945200998102, 117.70359060937952],
      [1.0850699540591549, 117.70364194264106],
      [1.0851947071193369, 117.70369327590682],
      [1.0853194601786482, 117.70374460917681],
      [1.0854442132370885, 117.70379594245102],
      [1.0855674287218244, 117.70385083011266],
      [1.085690248843327, 117.7039066317315],
      [1.0858130689638004, 117.70396243335487],
      [1.085935889083244, 117.70401823498278],
      [1.086063616888648, 117.70406152880655],
      [1.086191600608542, 117.70410417040472],
      [1.0863195843278346, 117.70414681200651],
      [1.0864475680465262, 117.70418945361189],
      [1.0865755517646158, 117.70423209522089],
      [1.0867035354821037, 117.70427473683353],
      [1.08683151919899, 117.70431737844973],
      [1.0869553799529175, 117.70437070236021],
      [1.087078813451226, 117.70442513326033],
      [1.0872022469485536, 117.70447956416488],
      [1.0873256804449007, 117.7045339950739],
      [1.087449113940266, 117.70458842598737],
      [1.0875725474346507, 117.70464285690528],
      [1.0877005007977614, 117.70468557717659],
      [1.0878284845179345, 117.70472821879704],
      [1.087956468237505, 117.70477086042109],
      [1.0880844519564727, 117.70481350204878],
      [1.0882124356748382, 117.70485614368008],
      [1.0883404193926012, 117.704898785315],
      [1.0884684031097616, 117.70494142695351],
      [1.0885963868263189, 117.70498406859565],
      [1.0887215829947403, 117.70503427183408],
      [1.088846609610503, 117.7050849350085],
      [1.088971636225414, 117.70513559818713],
      [1.089096662839474, 117.70518626136995],
      [1.0892216894526827, 117.70523692455696],
      [1.0893467160650399, 117.7052875877482],
      [1.089470209858441, 117.70534178664346],
      [1.0895926392068278, 117.70539844086024],
      [1.08971506855415, 117.70545509508163],
      [1.0898374979004068, 117.70551174930766],
      [1.0899599272455982, 117.70556840353825],
      [1.0900823565897242, 117.70562505777349],
      [1.0902047859327848, 117.7056817120133],
      [1.0903272152747798, 117.70573836625773],
      [1.090449644615709, 117.70579502050676],
      [1.090572240208601, 117.70585130341001],
      [1.0906960291988137, 117.7059049206885],
      [1.0908198181880713, 117.7059585379714],
      [1.0909436071763738, 117.70601215525869],
      [1.0910673961637214, 117.70606577255042],
      [1.0911911851501137, 117.70611938984652],
      [1.0913101747450407, 117.7061828719458],
      [1.0914287476317734, 117.70624721056079],
      [1.09154732051713, 117.70631154918084],
      [1.091665893401111, 117.70637588780596],
      [1.091784466283715, 117.70644022643616],
      [1.0919030391649431, 117.70650456507141],
      [1.0920234192497944, 117.7065653614384],
      [1.0921450870151994, 117.70662363384602],
      [1.092266754779475, 117.70668190625832],
      [1.0923884225426215, 117.70674017867537],
      [1.0925100903046376, 117.70679845109716],
      [1.0926317580655245, 117.70685672352361],
      [1.0927534258252811, 117.70691499595483],
      [1.0928750935839078, 117.70697326839075],
      [1.0929615006802709, 117.70701684956518],
      [1.0930527298014925, 117.70705976125234],
      [1.093149325338574, 117.70708658105683],
   ],
}

const polyline8 = {
   id: 8,
   data: [
      [1.0844659955259357, 117.70339743440069],
      [1.0844004511922587, 117.70351535982851],
      [1.0844126822962128, 117.70364279312982],
      [1.0844538420004286, 117.70377080525002],
      [1.0845130150811055, 117.70389205415903],
      [1.084573643098204, 117.70401256751667],
      [1.0846361666107331, 117.70413212259528],
      [1.0847033327622029, 117.70424898708727],
      [1.0847759457100126, 117.7043626949529],
      [1.0848536324620353, 117.70447240660302],
      [1.0849471244604758, 117.70456966976538],
      [1.0850406164557906, 117.70466693293378],
      [1.085127530819477, 117.70476964892069],
      [1.0852057406865303, 117.70487958088314],
      [1.0852882511322821, 117.70498583091177],
      [1.0853847841427626, 117.70508007553885],
      [1.0854813171503073, 117.70517432017198],
      [1.0855831510589595, 117.70526274366841],
      [1.085685962780015, 117.70535009339164],
      [1.0857997212043096, 117.70542179355633],
      [1.0859170050830054, 117.70548845368482],
      [1.0860292884252603, 117.70556250285605],
      [1.0861347463867996, 117.70564663754958],
      [1.0862402043459973, 117.70573077224901],
      [1.0863456623028536, 117.7058149069543],
      [1.086461784625765, 117.70588354867533],
      [1.086578000396561, 117.70595205464011],
      [1.0866942161658042, 117.70602056061013],
      [1.086809849041573, 117.7060900319494],
      [1.0869245684907736, 117.70616101607449],
      [1.087039287938306, 117.70623200020499],
      [1.0871540073841703, 117.70630298434088],
      [1.0872696671818725, 117.70637239685081],
      [1.0873864302575835, 117.70643996543316],
      [1.0875031933317822, 117.70650753402072],
      [1.0876199564044693, 117.7065751026135],
      [1.0877405000430527, 117.70663564912093],
      [1.087861171971236, 117.70669595734363],
      [1.0879818438982145, 117.70675626557116],
      [1.0881040866675251, 117.70681284286569],
      [1.0882315412570949, 117.70685704147733],
      [1.088358995846018, 117.70690124009272],
      [1.0884864504342933, 117.70694543871181],
      [1.0886142817605677, 117.70698836012602],
      [1.0887453126215392, 117.70702043457034],
      [1.0888763434821693, 117.70705250901744],
      [1.0890073743424589, 117.70708458346738],
      [1.0891386744440736, 117.70711516792484],
      [1.0892726410664713, 117.70713099573996],
      [1.089406607688786, 117.70714682355647],
      [1.0895407217461168, 117.70716111579634],
      [1.0896752516957378, 117.70717107640152],
      [1.0898097816453256, 117.70718103700759],
      [1.089944311594881, 117.70719099761453],
      [1.0900788415444032, 117.70720095822239],
      [1.090209272395058, 117.70723496900865],
      [1.0903395037106096, 117.70727015050525],
      [1.0904697350257506, 117.70730533200488],
      [1.09059996634048, 117.70734051350755],
      [1.0907301976547987, 117.70737569501327],
      [1.090860428968706, 117.70741087652203],
      [1.0909943574675272, 117.70742419242897],
      [1.0911289131425936, 117.70743379913982],
      [1.0912634688176293, 117.70744340585152],
      [1.091398024492634, 117.70745301256406],
      [1.0915326591176542, 117.70746126701721],
      [1.0916674182080468, 117.70746738962166],
      [1.0918021772984274, 117.70747351222667],
      [1.0919369363887954, 117.70747963483221],
      [1.0920715157094898, 117.70747185654193],
      [1.092206071384555, 117.70746224982766],
      [1.0923406270595897, 117.7074526431125],
      [1.0924751827345938, 117.7074430363965],
      [1.092586935601719, 117.70739210047955],
      [1.0926667970100177, 117.70728336253775],
      [1.0927977664294857, 117.70725778549378],
      [1.092928831125808, 117.70722837769092],
      [1.0930543023123593, 117.70717883476047],
      [1.0931784991227242, 117.70712616933659],
      [1.0932444870285536, 117.70710220282655],
   ],
}

// const pointA = {
//    lat: 1.0930549614366034,
//    lng: 117.70730661703263,
// }

// const pointA = {
//    lat: 1.0883732998308517,
//    lng: 117.69953481518449,
// }

// const pointA = {
//    lat: 1.094876351748612,
//    lng: 117.70661040947688,
// }

// const pointA = {
//    lat: 1.0770303948034823,
//    lng: 117.70540481060134,
// }

// const pointA = {
//    lat: 1.0850155740350755,
//    lng: 117.70361238076421,
// }

const pointA = {
   lat: 1.0822974474063958,
   lng: 117.69751519484963,
}

// const pointB = {
//    lat: 1.0911815196877972,
//    lng: 117.70060405885913,
// }

// const pointB = {
//    lat: 1.0771417597493147,
//    lng: 117.70523766142561,
// }

// const pointB = {
//    lat: 1.082189384699234,
//    lng: 117.69492286240008,
// }

// const pointB = {
//    lat: 1.0789458299429693,
//    lng: 117.69786072326727,
// }

// const pointB = {
//    lat: 1.081352906550968,
//    lng: 117.70254571846229,
// }

// const pointB = {
//    lat: 1.0858557617326103,
//    lng: 117.70309220171644,
// }

// const pointB = {
//    lat: 1.082247089650563,
//    lng: 117.69502620801843,
// }

// const pointB = {
//    lat: 1.0825690847113534,
//    lng: 117.70570549359476,
// }

const pointB = {
   lat: 1.095022674258579,
   lng: 117.70678874955401,
}

// const pointB = {
//    lat: 1.0906060374966153,
//    lng: 117.70017048710707,
// }

// const pointB = {
//    lat: 1.0771846913253085,
//    lng: 117.7051947583815,
// }

const polylineLayers = []

const polylines = [
   polyline0,
   polyline1,
   polyline2,
   polyline3,
   polyline4,
   polyline5,
   polyline6,
   polyline7,
   polyline8,
]

const convertPolylinePerMeter = (polyline) => {
   const reverse = polyline.data.map((item) => [item[1], item[0]])
   console.log('polyline', polyline)
   console.log('reverse', reverse)

   // Create a LineString feature
   const lineString = turf.lineString(reverse)

   // Calculate the total length of the LineString
   const totalLength = turf.length(lineString, { units: 'meters' })

   // Set the desired segment length (50 meters)
   const segmentLength = 15

   // Create an empty array to store the split segments
   const splitSegments = []

   // Loop through the LineString and split it into segments of 50 meters each
   for (let i = 0; i < totalLength; i += segmentLength) {
      const startPoint = turf.along(lineString, i, { units: 'meters' })

      // splitSegments.push(startPoint.geometry.coordinates)
      splitSegments.push([
         startPoint.geometry.coordinates[1],
         startPoint.geometry.coordinates[0],
      ])
   }

   return splitSegments
}

// const testPoly = convertPolylinePerMeter(polyline8)
// console.log('testPoly', testPoly)
// testPoly.map((item) => {
//    L.marker([item[0], item[1]]).addTo(map).bindPopup('Point A')
// })

var polyline = L.polyline(
   polylines.map((polyline) => polyline.data),
   {
      color: 'gray',
   }
).addTo(map)

// Add markers for pointA and pointB
L.marker([pointA.lat, pointA.lng]).addTo(map).openPopup()

L.marker([pointB.lat, pointB.lng]).addTo(map).bindPopup('Point Tujuan')
// L.marker([1.0846922783971695, 117.70347456710509]).addTo(map).bindPopup('CACAT')

const getRoutes = () => {
   const adjacencyList = new Map()

   polylines.forEach((poly) => {
      adjacencyList.set(poly.id, [])
   })

   for (let i = 0; i < polylines.length; i++) {
      const visitedNeighbors = new Set() // Track visited neighbors for each polyline
      for (let j = 0; j < polylines[i].data.length; j++) {
         const coordJ = L.latLng(
            polylines[i].data[j][0],
            polylines[i].data[j][1]
         )

         for (let k = 0; k < polylines.length; k++) {
            if (k !== i) {
               for (let l = 0; l < polylines[k].data.length; l++) {
                  const coordL = L.latLng(
                     polylines[k].data[l][0],
                     polylines[k].data[l][1]
                  )

                  const distance = coordJ.distanceTo(coordL)

                  if (distance < 10 && !visitedNeighbors.has(polylines[k].id)) {
                     adjacencyList.get(polylines[i].id).push(polylines[k].id)
                     visitedNeighbors.add(polylines[k].id)
                     break
                  }
               }
            }
         }
      }
   }

   return adjacencyList
}

const polyIds = polylines.map((item) => item.id)
const routes = getRoutes()
// console.log('routes', routes)

// -------------------
let resultRoutes = []

const dfs = (
   currentPolyline,
   destination,
   visited = new Set(),
   currentRoute = []
) => {
   visited.add(currentPolyline)
   currentRoute.push(currentPolyline)

   if (currentPolyline === destination) {
      resultRoutes.push([...currentRoute])
      console.log('Found route:', currentRoute)
   } else {
      const destinations = routes.get(currentPolyline)
      for (const nextAirport of destinations) {
         if (!visited.has(nextAirport)) {
            dfs(nextAirport, destination, visited, currentRoute)
         }
      }
   }

   visited.delete(currentPolyline)
   currentRoute.pop()
}

// dfs(0, 6)

console.log('All routes:', resultRoutes)

const renderRouting = (from, to) => {
   var fromCoordinat = L.latLng(from.lat, from.lng)
   var toCoordinat = L.latLng(to.lat, to.lng)

   // ambil polyline yang berdekatan dengan titik awal dan tujuan
   const polylineLVL2 = polylines
      .map((polyline, index) => {
         let isReverse = false
         let isValid = false
         let indexI = -1

         for (let i = 0; i < polyline.data.length; i++) {
            var coord = L.latLng(polyline.data[i][0], polyline.data[i][1])

            var distanceTo = coord.distanceTo(toCoordinat)
            var distanceFrom = coord.distanceTo(fromCoordinat)

            let resIndex = polyline.data.length - i - 7

            if (distanceFrom <= 100) {
               console.log('resIndex', resIndex)
               isValid = true
               indexI = resIndex < 0 ? 0 : resIndex
               break
            }
         }

         const fromRes = polyline.data.map((polylineItem) => {
            var polyCoor = L.latLng(polylineItem[0], polylineItem[1])
            var distance = polyCoor.distanceTo(fromCoordinat)

            return distance
         })

         const toRes = polyline.data.map((polylineItem) => {
            var polyCoor = L.latLng(polylineItem[0], polylineItem[1])
            var distance = polyCoor.distanceTo(toCoordinat)

            return distance
         })

         if (fromRes[0] > fromRes[fromRes.length - 1]) {
            // item.polyline.reverse()
            isReverse = true
         }

         // Create a new array for reversed polyline if needed
         const reversedPolyline = isReverse
            ? polyline.data.reverse()
            : polyline.data

         return {
            id: polyline.id,
            isReverse,
            polyline: reversedPolyline,
            from: Math.min(...fromRes),
            to: Math.min(...toRes),
            isValid,
            indexI,
         }
      })
      .sort((a, b) => a.from - b.from)

   const minFrom = polylineLVL2.reduce(
      (max, obj) => (obj.from < max ? obj.from : max),
      polylineLVL2[0].from
   )
   const minTo = polylineLVL2.reduce(
      (max, obj) => (obj.to < max ? obj.to : max),
      polylineLVL2[0].to
   )

   const objFrom = polylineLVL2.find((item) => item.from == minFrom)
   const objTo = polylineLVL2.find((item) => item.to == minTo)

   console.log('id', {
      to: minTo,
      from: minFrom,
      objFrom,
      objTo,
   })

   resultRoutes = []
   dfs(objFrom.id, objTo.id)

   console.log('resultRoutes', resultRoutes)
   console.log('polylineLVL2', polylineLVL2)

   const routes = []

   resultRoutes.map((routess) => {
      const res = routess.map((id) => {
         const poly = polylineLVL2.find((item) => item.id == id)
         return poly
      })

      routes.push(res)
   })

   console.log('routeszz', routes)

   const nearest = routes
      .map((route) => {
         let distance = 0
         const temp = createNewPolyline(route, fromCoordinat, toCoordinat)

         temp.map((item) => {
            distance += calculatePolylineDistance(item)
         })

         return {
            polylines: temp,
            distance,
         }
      })
      .sort((a, b) => a.distance - b.distance)

   renderPolyline(nearest[0].polylines, 'green')
}

const createNewPolyline = (routes, from, to) => {
   const result = []

   let tempIndexBefore = 0

   for (let i = 0; i < routes.length; i++) {
      // console.log(
      //    '===============================================================================================',
      //    routes[i]
      // )

      if (routes.length == 1) {
         console.log('1 line')
         const getDistancesFrom = routes[i].polyline.map((poly) => {
            const coord = L.latLng(poly[0], poly[1])

            const distance = coord.distanceTo(from)
            return distance
         })

         const getDistancesTo = routes[i].polyline.map((poly) => {
            const coord = L.latLng(poly[0], poly[1])

            const distance = coord.distanceTo(to)
            return distance
         })

         const minFrom = Math.min(...getDistancesFrom)
         const minTo = Math.min(...getDistancesTo)

         const getIndexNearestFrom = getDistancesFrom.indexOf(minFrom)
         const getIndexNearestTo = getDistancesTo.indexOf(minTo)

         result.push(
            routes[i].polyline.slice(getIndexNearestFrom, getIndexNearestTo)
         )

         // renderPolyline(
         //    routes[i].polyline.slice(getIndexNearestFrom, getIndexNearestTo),
         //    'green'
         // )
      } else if (i == 0) {
         const getDistances = routes[i].polyline.map((poly) => {
            const coord = L.latLng(poly[0], poly[1])

            const distance = coord.distanceTo(from)
            return distance
         })

         const min = Math.min(...getDistances)
         const getIndexNearestFrom = getDistances.indexOf(min)

         const getDistancesSegmentNext = []

         for (let j = 0; j < routes[i].polyline.length; j++) {
            const coord = L.latLng(
               routes[i].polyline[j][0],
               routes[i].polyline[j][1]
            )

            for (let k = 0; k < routes[i + 1].polyline.length; k++) {
               const coord2 = L.latLng(
                  routes[i + 1].polyline[k][0],
                  routes[i + 1].polyline[k][1]
               )
               const distance = coord.distanceTo(coord2)

               if (distance < 100) {
                  getDistancesSegmentNext.push({
                     index: j,
                     indexK: k,
                     distance: distance,
                  })
               }
            }
         }

         getDistancesSegmentNext.sort((a, b) => a.distance - b.distance)

         // console.log('getDistancesSegmentNext', getDistancesSegmentNext[0])

         let res = []
         let tempRest = []

         if (getDistancesSegmentNext[0].index < getIndexNearestFrom) {
            tempRest = routes[i].polyline.slice(
               getDistancesSegmentNext[0].index,
               getIndexNearestFrom + 1
            )
         } else {
            tempRest = routes[i].polyline.slice(
               getIndexNearestFrom,
               getDistancesSegmentNext[0].index + 1
            )
         }

         if (tempRest.length == 0) {
            res = routes[i].polyline
         } else {
            res = tempRest
         }
         tempIndexBefore = getDistancesSegmentNext[0].indexK

         result.push(res)
         // renderPolyline(res, 'green')
      } else if (i == routes.length - 1) {
         const getDistances = routes[i].polyline.map((poly) => {
            const coord = L.latLng(poly[0], poly[1])

            const distance = coord.distanceTo(to)
            return distance
         })

         const min = Math.min(...getDistances)
         const getIndexNearestTo = getDistances.indexOf(min)

         const getDistancesSegmentBefore = []

         for (let j = 0; j < routes[i].polyline.length; j++) {
            const coord = L.latLng(
               routes[i].polyline[j][0],
               routes[i].polyline[j][1]
            )

            for (let k = 0; k < routes[i - 1].polyline.length; k++) {
               const coord2 = L.latLng(
                  routes[i - 1].polyline[k][0],
                  routes[i - 1].polyline[k][1]
               )
               const distance = coord.distanceTo(coord2)

               if (distance < 100) {
                  getDistancesSegmentBefore.push({
                     index: j,
                     distance: distance,
                  })
               }
            }
         }

         getDistancesSegmentBefore.sort((a, b) => a.distance - b.distance)

         let res = []
         let tempRest = []

         if (getDistancesSegmentBefore[0].index < getIndexNearestTo) {
            tempRest = routes[i].polyline.slice(
               getDistancesSegmentBefore[0].index,
               getIndexNearestTo
            )
         } else {
            tempRest = routes[i].polyline.slice(
               getIndexNearestTo,
               getDistancesSegmentBefore[0].index + 1
            )
         }

         if (tempRest.length == 0) {
            res = routes[i].polyline
         } else {
            res = tempRest
         }

         result.push(res)
         // renderPolyline(res, 'green')
      } else {
         // console.log('MIDDLE ---------------------------')
         const getDistancesSegmentNext = []

         for (let j = 0; j < routes[i].polyline.length; j++) {
            const coord = L.latLng(
               routes[i].polyline[j][0],
               routes[i].polyline[j][1]
            )

            for (let k = 0; k < routes[i + 1].polyline.length; k++) {
               const coord2 = L.latLng(
                  routes[i + 1].polyline[k][0],
                  routes[i + 1].polyline[k][1]
               )
               const distance = coord.distanceTo(coord2)

               if (distance < 100) {
                  getDistancesSegmentNext.push({
                     indexJ: j,
                     indexK: k,
                     distance: distance,
                  })
               }
            }
         }

         getDistancesSegmentNext.sort((a, b) => a.distance - b.distance)

         const { indexJ, indexK } = getDistancesSegmentNext[0]

         let res = []
         let tempRest = []

         if (indexJ < indexK) {
            tempRest = routes[i].polyline.slice(indexJ, tempIndexBefore + 1)
         } else {
            tempRest = routes[i].polyline.slice(tempIndexBefore, indexJ + 1)
         }

         if (tempRest.length == 0) {
            res = routes[i].polyline
         } else {
            res = tempRest
         }

         tempIndexBefore = indexK

         result.push(res)
         // renderPolyline(res, 'green')
      }
   }

   return result
}

renderRouting(pointA, pointB)

function calculateDistance(point1, point2) {
   const [lat1, lon1] = point1
   const [lat2, lon2] = point2
   const radius = 6371000 // Earth's radius in meters

   const dLat = ((lat2 - lat1) * Math.PI) / 180
   const dLon = ((lon2 - lon1) * Math.PI) / 180

   const a =
      Math.sin(dLat / 2) * Math.sin(dLat / 2) +
      Math.cos((lat1 * Math.PI) / 180) *
         Math.cos((lat2 * Math.PI) / 180) *
         Math.sin(dLon / 2) *
         Math.sin(dLon / 2)

   const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))

   const distance = radius * c
   return distance
}

function calculatePolylineDistance(data) {
   let totalDistance = 0
   for (let i = 0; i < data.length - 1; i++) {
      const segmentDistance = calculateDistance(data[i], data[i + 1])
      totalDistance += segmentDistance
   }
   return totalDistance
}
